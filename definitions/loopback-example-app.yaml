paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: user.upsert__put_users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: user.upsert__patch_users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  /users/replaceOrCreate:
    post:
      tags:
        - user
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: user.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/upsertWithWhere:
    post:
      tags:
        - user
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: user.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/exists':
    get:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__get_users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/users/{id}':
    head:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__head_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'user.prototype.updateAttributes__put_users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'user.prototype.updateAttributes__patch_users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/replace':
    post:
      tags:
        - user
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: user.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/findOne:
    get:
      tags:
        - user
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/update:
    post:
      tags:
        - user
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: user.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /users/count:
    get:
      tags:
        - user
      summary: Count instances of the model matched by where from the data source.
      operationId: user.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Torres:
    post:
      tags:
        - Torre
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Torre.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
    put:
      tags:
        - Torre
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Torre.upsert__put_Torres
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
    patch:
      tags:
        - Torre
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Torre.upsert__patch_Torres
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
    get:
      tags:
        - Torre
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Torre.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Torre'
      deprecated: false
  /Torres/replaceOrCreate:
    post:
      tags:
        - Torre
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Torre.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
  /Torres/upsertWithWhere:
    post:
      tags:
        - Torre
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Torre.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
  '/Torres/{id}/exists':
    get:
      tags:
        - Torre
      summary: Check whether a model instance exists in the data source.
      operationId: 'Torre.exists__get_Torres_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Torres/{id}':
    head:
      tags:
        - Torre
      summary: Check whether a model instance exists in the data source.
      operationId: 'Torre.exists__head_Torres_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Torre
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Torre.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
    delete:
      tags:
        - Torre
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Torre.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Torre
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Torre.prototype.updateAttributes__put_Torres_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Torre'
        - name: id
          in: path
          description: Torre id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
    patch:
      tags:
        - Torre
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Torre.prototype.updateAttributes__patch_Torres_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Torre'
        - name: id
          in: path
          description: Torre id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
  '/Torres/{id}/replace':
    post:
      tags:
        - Torre
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Torre.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
  /Torres/findOne:
    get:
      tags:
        - Torre
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Torre.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Torre'
      deprecated: false
  /Torres/update:
    post:
      tags:
        - Torre
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Torre.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Torre'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Torres/count:
    get:
      tags:
        - Torre
      summary: Count instances of the model matched by where from the data source.
      operationId: Torre.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /SubTorres:
    post:
      tags:
        - SubTorre
      summary: Create a new instance of the model and persist it into the data source.
      operationId: SubTorre.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
    put:
      tags:
        - SubTorre
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: SubTorre.upsert__put_SubTorres
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
    patch:
      tags:
        - SubTorre
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: SubTorre.upsert__patch_SubTorres
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
    get:
      tags:
        - SubTorre
      summary: Find all instances of the model matched by filter from the data source.
      operationId: SubTorre.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/SubTorre'
      deprecated: false
  /SubTorres/replaceOrCreate:
    post:
      tags:
        - SubTorre
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: SubTorre.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
  /SubTorres/upsertWithWhere:
    post:
      tags:
        - SubTorre
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: SubTorre.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
  '/SubTorres/{id}/exists':
    get:
      tags:
        - SubTorre
      summary: Check whether a model instance exists in the data source.
      operationId: 'SubTorre.exists__get_SubTorres_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/SubTorres/{id}':
    head:
      tags:
        - SubTorre
      summary: Check whether a model instance exists in the data source.
      operationId: 'SubTorre.exists__head_SubTorres_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - SubTorre
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: SubTorre.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
    delete:
      tags:
        - SubTorre
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: SubTorre.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - SubTorre
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'SubTorre.prototype.updateAttributes__put_SubTorres_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SubTorre'
        - name: id
          in: path
          description: SubTorre id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
    patch:
      tags:
        - SubTorre
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'SubTorre.prototype.updateAttributes__patch_SubTorres_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SubTorre'
        - name: id
          in: path
          description: SubTorre id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
  '/SubTorres/{id}/replace':
    post:
      tags:
        - SubTorre
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: SubTorre.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
  /SubTorres/findOne:
    get:
      tags:
        - SubTorre
      summary: Find first instance of the model matched by filter from the data source.
      operationId: SubTorre.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SubTorre'
      deprecated: false
  /SubTorres/update:
    post:
      tags:
        - SubTorre
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: SubTorre.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SubTorre'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /SubTorres/count:
    get:
      tags:
        - SubTorre
      summary: Count instances of the model matched by where from the data source.
      operationId: SubTorre.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /projetos:
    post:
      tags:
        - projeto
      summary: Create a new instance of the model and persist it into the data source.
      operationId: projeto.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
    put:
      tags:
        - projeto
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: projeto.upsert__put_projetos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
    patch:
      tags:
        - projeto
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: projeto.upsert__patch_projetos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
    get:
      tags:
        - projeto
      summary: Find all instances of the model matched by filter from the data source.
      operationId: projeto.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/projeto'
      deprecated: false
  /projetos/replaceOrCreate:
    post:
      tags:
        - projeto
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: projeto.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
  /projetos/upsertWithWhere:
    post:
      tags:
        - projeto
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: projeto.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
  '/projetos/{id}/exists':
    get:
      tags:
        - projeto
      summary: Check whether a model instance exists in the data source.
      operationId: 'projeto.exists__get_projetos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/projetos/{id}':
    head:
      tags:
        - projeto
      summary: Check whether a model instance exists in the data source.
      operationId: 'projeto.exists__head_projetos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - projeto
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: projeto.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
    delete:
      tags:
        - projeto
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: projeto.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - projeto
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'projeto.prototype.updateAttributes__put_projetos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/projeto'
        - name: id
          in: path
          description: projeto id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
    patch:
      tags:
        - projeto
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'projeto.prototype.updateAttributes__patch_projetos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/projeto'
        - name: id
          in: path
          description: projeto id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
  '/projetos/{id}/replace':
    post:
      tags:
        - projeto
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: projeto.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
  /projetos/findOne:
    get:
      tags:
        - projeto
      summary: Find first instance of the model matched by filter from the data source.
      operationId: projeto.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/projeto'
      deprecated: false
  /projetos/update:
    post:
      tags:
        - projeto
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: projeto.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/projeto'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /projetos/count:
    get:
      tags:
        - projeto
      summary: Count instances of the model matched by where from the data source.
      operationId: projeto.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /LimiteGraficos:
    post:
      tags:
        - LimiteGrafico
      summary: Create a new instance of the model and persist it into the data source.
      operationId: LimiteGrafico.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
    put:
      tags:
        - LimiteGrafico
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LimiteGrafico.upsert__put_LimiteGraficos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
    patch:
      tags:
        - LimiteGrafico
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LimiteGrafico.upsert__patch_LimiteGraficos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
    get:
      tags:
        - LimiteGrafico
      summary: Find all instances of the model matched by filter from the data source.
      operationId: LimiteGrafico.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  /LimiteGraficos/replaceOrCreate:
    post:
      tags:
        - LimiteGrafico
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LimiteGrafico.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  /LimiteGraficos/upsertWithWhere:
    post:
      tags:
        - LimiteGrafico
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: LimiteGrafico.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  '/LimiteGraficos/{id}/exists':
    get:
      tags:
        - LimiteGrafico
      summary: Check whether a model instance exists in the data source.
      operationId: 'LimiteGrafico.exists__get_LimiteGraficos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/LimiteGraficos/{id}':
    head:
      tags:
        - LimiteGrafico
      summary: Check whether a model instance exists in the data source.
      operationId: 'LimiteGrafico.exists__head_LimiteGraficos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - LimiteGrafico
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: LimiteGrafico.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
    delete:
      tags:
        - LimiteGrafico
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: LimiteGrafico.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - LimiteGrafico
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'LimiteGrafico.prototype.updateAttributes__put_LimiteGraficos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteGrafico'
        - name: id
          in: path
          description: LimiteGrafico id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
    patch:
      tags:
        - LimiteGrafico
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'LimiteGrafico.prototype.updateAttributes__patch_LimiteGraficos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteGrafico'
        - name: id
          in: path
          description: LimiteGrafico id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  '/LimiteGraficos/{id}/replace':
    post:
      tags:
        - LimiteGrafico
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: LimiteGrafico.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  /LimiteGraficos/findOne:
    get:
      tags:
        - LimiteGrafico
      summary: Find first instance of the model matched by filter from the data source.
      operationId: LimiteGrafico.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteGrafico'
      deprecated: false
  /LimiteGraficos/update:
    post:
      tags:
        - LimiteGrafico
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: LimiteGrafico.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteGrafico'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /LimiteGraficos/count:
    get:
      tags:
        - LimiteGrafico
      summary: Count instances of the model matched by where from the data source.
      operationId: LimiteGrafico.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /LimiteReais:
    post:
      tags:
        - LimiteReal
      summary: Create a new instance of the model and persist it into the data source.
      operationId: LimiteReal.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
    put:
      tags:
        - LimiteReal
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LimiteReal.upsert__put_LimiteReais
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
    patch:
      tags:
        - LimiteReal
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: LimiteReal.upsert__patch_LimiteReais
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
    get:
      tags:
        - LimiteReal
      summary: Find all instances of the model matched by filter from the data source.
      operationId: LimiteReal.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/LimiteReal'
      deprecated: false
  /LimiteReais/replaceOrCreate:
    post:
      tags:
        - LimiteReal
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: LimiteReal.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
  /LimiteReais/upsertWithWhere:
    post:
      tags:
        - LimiteReal
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: LimiteReal.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
  '/LimiteReais/{id}/exists':
    get:
      tags:
        - LimiteReal
      summary: Check whether a model instance exists in the data source.
      operationId: 'LimiteReal.exists__get_LimiteReais_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/LimiteReais/{id}':
    head:
      tags:
        - LimiteReal
      summary: Check whether a model instance exists in the data source.
      operationId: 'LimiteReal.exists__head_LimiteReais_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - LimiteReal
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: LimiteReal.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
    delete:
      tags:
        - LimiteReal
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: LimiteReal.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - LimiteReal
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'LimiteReal.prototype.updateAttributes__put_LimiteReais_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteReal'
        - name: id
          in: path
          description: LimiteReal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
    patch:
      tags:
        - LimiteReal
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'LimiteReal.prototype.updateAttributes__patch_LimiteReais_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteReal'
        - name: id
          in: path
          description: LimiteReal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
  '/LimiteReais/{id}/replace':
    post:
      tags:
        - LimiteReal
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: LimiteReal.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
  /LimiteReais/findOne:
    get:
      tags:
        - LimiteReal
      summary: Find first instance of the model matched by filter from the data source.
      operationId: LimiteReal.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/LimiteReal'
      deprecated: false
  /LimiteReais/update:
    post:
      tags:
        - LimiteReal
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: LimiteReal.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/LimiteReal'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /LimiteReais/count:
    get:
      tags:
        - LimiteReal
      summary: Count instances of the model matched by where from the data source.
      operationId: LimiteReal.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Fases:
    post:
      tags:
        - Fase
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Fase.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
    put:
      tags:
        - Fase
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Fase.upsert__put_Fases
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
    patch:
      tags:
        - Fase
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Fase.upsert__patch_Fases
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
    get:
      tags:
        - Fase
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Fase.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Fase'
      deprecated: false
  /Fases/replaceOrCreate:
    post:
      tags:
        - Fase
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Fase.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
  /Fases/upsertWithWhere:
    post:
      tags:
        - Fase
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Fase.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
  '/Fases/{id}/exists':
    get:
      tags:
        - Fase
      summary: Check whether a model instance exists in the data source.
      operationId: 'Fase.exists__get_Fases_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Fases/{id}':
    head:
      tags:
        - Fase
      summary: Check whether a model instance exists in the data source.
      operationId: 'Fase.exists__head_Fases_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Fase
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Fase.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
    delete:
      tags:
        - Fase
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Fase.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Fase
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Fase.prototype.updateAttributes__put_Fases_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Fase'
        - name: id
          in: path
          description: Fase id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
    patch:
      tags:
        - Fase
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Fase.prototype.updateAttributes__patch_Fases_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Fase'
        - name: id
          in: path
          description: Fase id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
  '/Fases/{id}/replace':
    post:
      tags:
        - Fase
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Fase.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
  /Fases/findOne:
    get:
      tags:
        - Fase
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Fase.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Fase'
      deprecated: false
  /Fases/update:
    post:
      tags:
        - Fase
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Fase.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Fase'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Fases/count:
    get:
      tags:
        - Fase
      summary: Count instances of the model matched by where from the data source.
      operationId: Fase.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Regioes:
    post:
      tags:
        - Regiao
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Regiao.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
    put:
      tags:
        - Regiao
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Regiao.upsert__put_Regioes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
    patch:
      tags:
        - Regiao
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Regiao.upsert__patch_Regioes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
    get:
      tags:
        - Regiao
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Regiao.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Regiao'
      deprecated: false
  /Regioes/replaceOrCreate:
    post:
      tags:
        - Regiao
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Regiao.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
  /Regioes/upsertWithWhere:
    post:
      tags:
        - Regiao
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Regiao.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
  '/Regioes/{id}/exists':
    get:
      tags:
        - Regiao
      summary: Check whether a model instance exists in the data source.
      operationId: 'Regiao.exists__get_Regioes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Regioes/{id}':
    head:
      tags:
        - Regiao
      summary: Check whether a model instance exists in the data source.
      operationId: 'Regiao.exists__head_Regioes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Regiao
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Regiao.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
    delete:
      tags:
        - Regiao
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Regiao.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Regiao
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Regiao.prototype.updateAttributes__put_Regioes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Regiao'
        - name: id
          in: path
          description: Regiao id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
    patch:
      tags:
        - Regiao
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Regiao.prototype.updateAttributes__patch_Regioes_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Regiao'
        - name: id
          in: path
          description: Regiao id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
  '/Regioes/{id}/replace':
    post:
      tags:
        - Regiao
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Regiao.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
  /Regioes/findOne:
    get:
      tags:
        - Regiao
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Regiao.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Regiao'
      deprecated: false
  /Regioes/update:
    post:
      tags:
        - Regiao
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Regiao.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Regiao'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Regioes/count:
    get:
      tags:
        - Regiao
      summary: Count instances of the model matched by where from the data source.
      operationId: Regiao.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ClassGerais:
    post:
      tags:
        - ClassGeral
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ClassGeral.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
    put:
      tags:
        - ClassGeral
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ClassGeral.upsert__put_ClassGerais
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
    patch:
      tags:
        - ClassGeral
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ClassGeral.upsert__patch_ClassGerais
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
    get:
      tags:
        - ClassGeral
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ClassGeral.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ClassGeral'
      deprecated: false
  /ClassGerais/replaceOrCreate:
    post:
      tags:
        - ClassGeral
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ClassGeral.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
  /ClassGerais/upsertWithWhere:
    post:
      tags:
        - ClassGeral
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ClassGeral.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
  '/ClassGerais/{id}/exists':
    get:
      tags:
        - ClassGeral
      summary: Check whether a model instance exists in the data source.
      operationId: 'ClassGeral.exists__get_ClassGerais_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ClassGerais/{id}':
    head:
      tags:
        - ClassGeral
      summary: Check whether a model instance exists in the data source.
      operationId: 'ClassGeral.exists__head_ClassGerais_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ClassGeral
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ClassGeral.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
    delete:
      tags:
        - ClassGeral
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ClassGeral.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - ClassGeral
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'ClassGeral.prototype.updateAttributes__put_ClassGerais_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ClassGeral'
        - name: id
          in: path
          description: ClassGeral id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
    patch:
      tags:
        - ClassGeral
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'ClassGeral.prototype.updateAttributes__patch_ClassGerais_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ClassGeral'
        - name: id
          in: path
          description: ClassGeral id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
  '/ClassGerais/{id}/replace':
    post:
      tags:
        - ClassGeral
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: ClassGeral.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
  /ClassGerais/findOne:
    get:
      tags:
        - ClassGeral
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ClassGeral.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ClassGeral'
      deprecated: false
  /ClassGerais/update:
    post:
      tags:
        - ClassGeral
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ClassGeral.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ClassGeral'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ClassGerais/count:
    get:
      tags:
        - ClassGeral
      summary: Count instances of the model matched by where from the data source.
      operationId: ClassGeral.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  user:
    properties:
      login_nome:
        type: string
      login_pass:
        type: string
      login_user:
        type: string
      perfil:
        type: string
      familia:
        type: array
        items:
          type: string
    required:
      - login_nome
      - login_pass
      - login_user
      - perfil
      - familia
    additionalProperties: false
  x-any:
    properties: {}
  Torre:
    properties:
      Descricao_Torre:
        type: string
      Torre:
        type: string
    required:
      - Descricao_Torre
      - Torre
    additionalProperties: false
  SubTorre:
    properties:
      max_grafico:
        type: number
        format: double
      subtorre:
        type: string
      torre_id:
        type: string
      ano_limite:
        type: number
        format: double
    required:
      - max_grafico
      - subtorre
      - torre_id
      - ano_limite
    additionalProperties: false
  projeto:
    properties:
      classificacao_geral:
        type: string
      familia:
        type: string
      fase:
        type: string
      gerente:
        type: string
      meses:
        type: array
        items:
          type: object
      projeto:
        type: string
      projeto_id:
        type: string
      proposta:
        type: string
      regiao:
        type: string
      sistema:
        type: string
      valor_total_proj:
        type: number
        format: double
      descricao:
        type: string
    required:
      - classificacao_geral
      - familia
      - fase
      - gerente
      - meses
      - projeto
      - projeto_id
      - proposta
      - regiao
      - sistema
      - valor_total_proj
      - descricao
    additionalProperties: false
  LimiteGrafico:
    properties:
      data_corte:
        description: Data de corte do Limite
        type: number
        format: double
      familia:
        description: familia que representa o valor do limite
        type: string
      id:
        description: id limite grafico
        type: number
        format: double
      torre:
        description: torre que ocorre a variação
        type: string
      valor_limite:
        description: valor do limite do grafico
        type: number
        format: double
      variacao_torre:
        description: variacao da porcentagem por torre
        type: number
        format: double
      varicao:
        description: variacao da porcentagem por familia
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  LimiteReal:
    properties:
      dados:
        description: mes ano do limite
        type: array
        items:
          type: object
      familia:
        description: subtorre do limite real
        type: string
    required:
      - familia
    additionalProperties: false
  Fase:
    properties:
      descricao:
        type: string
      fase:
        type: string
    required:
      - fase
    additionalProperties: false
  Regiao:
    properties:
      descricao:
        type: string
      familia:
        description: familia
        type: string
      id_regiao:
        description: id unico de regiao
        type: string
      regiao:
        description: regiao
        type: string
      sistemas:
        description: vetor de sistemas
        type: array
        items:
          type: string
    required:
      - familia
      - id_regiao
      - regiao
    additionalProperties: false
  ClassGeral:
    properties:
      ClassGeral_id:
        type: string
      Descricao:
        type: string
      Baseline:
        type: boolean
    required:
      - ClassGeral_id
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: loopback-example-app
  version: 1.0.0
  title: loopback-example-app
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
